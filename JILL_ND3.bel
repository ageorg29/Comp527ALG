% author : Aina Linn Georges
% date : 04/06/2016 
% 
% JILL (natural deduction) 


% Defining propositions
LF o : type =
| top : o
| one : o
| zero : o
| aAnd : o -> o -> o
| aOr : o -> o -> o
| mImp : o -> o -> o
| mAnd : o -> o -> o
| excl : o -> o
| intr : o -> o
; 

% Defining judgments 
LF j : type = 
| true : o -> j
| poss : o -> j
;

% Defining goal/poss
LF g : type = 
| goal : o -> g
| poss_g : o -> g
;

% Defining (intuitionistic) assumptions
LF valid : o -> type = 
| int_asmp : valid A
;

% defining contexts
LF linctx : type = 
| empty : linctx
| cons : linctx -> o -> linctx -> linctx
;

% defining merging
LF merge : linctx -> linctx -> linctx -> type = 
| e_m : merge empty C C
| e_cl : merge C1 C C' -> merge (cons C1 A C2) C (cons C' A C2)
| e_cr : merge C1 C C' -> merge (cons C2 A C1) C (cons C2 A C')
;

% defining assumption add
LF added : linctx -> o -> linctx -> type = 
| e_a : added empty A (cons empty A empty)
| c_al : added C A C' -> added (cons C B C'') A (cons C' B C'')
| c_ar : added C A C' -> added (cons C'' B C) A (cons C'' B C')
;


% --------------------- JILL natural deduction ---------------------

LF jillnd : linctx -> j -> type =
| hyp : jillnd (cons empty A empty) (true A)
| hypexcl : valid A -> jillnd empty (true A)
| aAndI : jillnd G (true A) -> jillnd G (true B) -> jillnd G (true (aAnd A B))
| aAndEl : jillnd G (true (aAnd A B)) -> jillnd G (true A)
| aAndEr : jillnd G (true (aAnd A B)) -> jillnd G (true B)
| aOrIl : jillnd G (true A) -> jillnd G (true (aOr A B))
| aOrIr : jillnd G (true B) -> jillnd G (true (aOr A B))
| mAndI : jillnd G (true A) -> jillnd G' (true B) -> merge G G' G'' -> jillnd G'' (true (mAnd A B))
| mImpI : jillnd (cons G A G') (true B) -> merge G G' G'' -> jillnd G'' (true (mImp A B))
| mImpE : jillnd G (true (mImp A B)) -> jillnd G' (true A) -> merge G G' G'' -> jillnd G'' (true B)
| oneI : jillnd empty (true one)
| topI : jillnd G (true top)
| exclI : jillnd empty (true A) -> jillnd empty (true (excl A))
| intrI : jillnd G (poss A) -> jillnd G (true (intr A))
| aOrE : jillnd G (true (aOr A B)) -> added G' A G1 -> added G' B G2 -> jillnd G1 J -> jillnd G2 J -> merge G G' G'' -> jillnd G'' J
| mAndE : jillnd G (true (mAnd A B)) -> added G' A G1 -> added G1 B G2 -> jillnd G2 J -> merge G G' G'' -> jillnd G'' J
| oneE : jillnd G (true one) -> jillnd G' J -> merge G G' G'' -> jillnd G'' J
| zeroE : jillnd G (true zero) -> merge G G' G'' -> jillnd G'' J
| possI : {A:o} jillnd G (true A) -> jillnd G (poss A)
| exclE : jillnd G (true (excl A)) -> (valid A -> jillnd G' J) -> merge G G' G'' -> jillnd G'' J
| intrE : {C:o} jillnd G (true (intr A)) -> jillnd (cons empty A empty) (poss C) -> jillnd G (poss C)
;



% --------------------- JILL sequent calculus ---------------------

LF jillseq : linctx -> g -> type = 
| copy : valid A -> added G A G' -> jillseq G' C -> jillseq G C
| mAndL : added G A G1 -> added G1 B G2 -> jillseq G2 C -> added G (mAnd A B) G' -> jillseq G' C
| oneL : jillseq G C -> added G1 one G2 -> jillseq G2 C
| mImpL : jillseq G (goal A) -> added G' B G1 -> jillseq G1 C -> merge G G' G2 -> added G2 (mImp A B) G'' -> jillseq G'' C
| aAndLl : added G A G' -> jillseq G' C -> added G (aAnd A B) G'' -> jillseq G'' C
| aAndLr : added G B G' -> jillseq G' C -> added G (aAnd A B) G'' -> jillseq G'' C
| zeroL : added G zero G' -> jillseq G' C
| aOrL : added G A G1 -> added G B G2 -> jillseq G1 C -> jillseq G2 C -> added G (aOr A B) G' -> jillseq G' C
| exclL : (valid A -> jillseq G C) -> added G (excl A) G' -> jillseq G' C
| init : jillseq (cons empty A empty) (goal A)
| promote : jillseq G (goal A) -> jillseq G (poss_g A)
| mAndR : jillseq G (goal A) -> jillseq G' (goal B) -> merge G G' G'' -> jillseq G'' (goal (mAnd A B))
| oneR : jillseq empty (goal one)
| mImpR : added G A G' -> jillseq G' (goal B) -> jillseq G (goal (mImp A B))
| aAndR : jillseq G (goal A) -> jillseq G (goal B) -> jillseq G (goal (aAnd A B))
| topR : jillseq G (goal top)
| aOrRl : jillseq G (goal A) -> jillseq G (goal (aOr A B))
| aOrRl : jillseq G (goal B) -> jillseq G (goal (aOr A B))
| exclR : jillseq empty (goal A) -> jillseq empty (goal (excl A))
| intrL : jillseq (cons empty A empty) (poss_g C) -> jillseq (cons empty (intr A) empty) (poss_g C)
| intrR : jillseq G (poss_g A) -> jillseq G (goal (intr A))
| transG : jillseq G (goal A) -> jillseq G (goal A) 				
| transP : jillseq G (poss_g A) -> jillseq G (goal A)
;
